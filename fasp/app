from typing import Callable, Sequence
import sys

from clingo.app import App, AppOptions, Flag, clingo_main
from clingo.core import Library

from clingo.symbol import Symbol
from clingo.control import Control as ClingoControl
from fasp.control import Control
from fasp.solve import Model


class FaspApp(App):
    def __init__(self) -> None:
        super().__init__("fasp", "1.0.0")
        self._order = Flag()

    def print_model(self, model: Model, default_printer: Callable[[], None]) -> None:
        if self._order.value:
            print(" ".join(str(sym) for sym in sorted(model.symbols(shown=True))))
        else:
            default_printer()

    def register_options(self, options: AppOptions) -> None:
        options.add_flag(
            "fasp", "order", "Print atoms in models in order.", self._order
        )

    def main(self, clingo_control: ClingoControl, files: Sequence[str]) -> None:
        prefix="F"
        options = []
        control = Control(
            clingo_control.library,
            options,
            prefix,
            clingo_control,
        )
        control.parse_files(files)
        control.main()

def fasp_main(
    library: Library,
    options: Sequence[str] = [],
    raise_errors: bool = False
) -> None:
    """
    Main function for the fasp application.

    Parameters
    ----------
    library
        The Clingo library to use.
    options
        Command line options to pass to the application.
    raise_errors
        If True, raise exceptions on errors instead of printing them.
    """
    app = FaspApp(library)
    clingo_main(app, library, options, raise_errors)